#+TITLE: MIXAL Org Babel Example
#+AUTHOR: Chris Vig
#+EMAIL: chris@invictus.so

* Introduction

This folder contains an example showing how to use [[http://orgmode.org/worg/org-contrib/babel/][Org-Mode Babel]] in [[https://www.gnu.org/software/emacs/][Emacs]] for
development in the MIX progamming language. The relevant files are:

- ob-mixal-example.org :: This file. If viewing this on Github, you may want to
  use the "raw" view so you can see the source code for the document.
- ob-mixal-example.html :: An HTML file exported by Org mode for this document.

* Background

[[https://en.wikipedia.org/wiki/MIX][MIX]] is a mythical computer invented by Donald Knuth for use in the legendary
monograph [[https://en.wikipedia.org/wiki/The_Art_of_Computer_Programming][The Art of Computer Programming]] (TAOCP). The computer uses a simple
assembly language, known as MIXAL.

Since MIX is a hypothetical computer, we have to rely on a software "virtual
machine" to run our code. One example of such a virtual machine is the [[https://www.gnu.org/software/mdk/][GNU MDK]]
project, which features an assembler, virtual machine (including GUI), and
excellent support for coding and debugging in Emacs. =ob-racket= depends on MDK
to compile and run code - you will need it installed to make any use of this
package.

* Example Usage

As an example, we'll do one of the early exercises in volume 1 of TAOCP, to show
how =ob-mixal= makes it easy to integrate text, code, and output. Let's take a
look at exercise 6, from section 1.3.1.

** Problem

Assume that location 3000 contains:

|---+---+---+-----+----|
| 0 | 1 | 2 | 3-4 |  5 |
|---+---+---+-----+----|
| + | 5 | 1 | 200 | 15 |
|---+---+---+-----+----|

What is the result of the following instructions? (State if any of them are
undefined or only partially defined).

- =LDAN 3000=
- =LD2N 3000(3:4)=
- =LDX 3000(1:3)=
- =LDXN 3000(0:0)=

** Source Code

First, let's write a short program to test this out.

#+NAME: example_mixasm
#+BEGIN_SRC mixal :exports code
          ORIG    3000
          CON     VALUE
  START   %INST%  %ADDR%
          HLT
          END     START
#+END_SRC

The Org code for the above block looks like this:

#+BEGIN_SRC org
  ,#+NAME: example_mixasm
  ,#+BEGIN_SRC mixal :exports code
            ORIG    3000
            CON     VALUE
    START   %INST%  %ADDR%
            HLT
            END     START
  ,#+END_SRC
#+END_SRC

A couple of points on the above block:

- We set the *=:exports=* header arg to =code=, so that only the source code is
  included in the HTML output.
- We're using a symbolic constant, =VALUE=, to refer to the value of address 3000.
  We're also using two macros, =%INST%= and =%ADDR%=, to refer to the instruction
  we're going to test and its address.
- We didn't bother to set =VALUE=, =%INST%=, or =%ADDR%= in this block since we're
  not going to execute it directly.

** Generating Output

We use the *=:noweb=* syntax to /include/ the above code block in the Babel blocks
that we actually want to run. Here's an example of what this looks like.

#+BEGIN_SRC org
  ,#+BEGIN_SRC mixal :noweb yes :exports results :mixvm rA :var %INST%="LDAN" %ADDR%="3000" VALUE="5(1:1),1(2:2),200(3:4),15(5:5)"
  <<example_mixasm>>
  ,#+END_SRC
#+END_SRC

Couple of comments:

- Setting *=:noweb=* to =yes= enables the noweb syntax using the angle brackets.
  This includes the =example_mixasm= code block that we defined above.
- We set the *=:exports=* header arg to =results=. We only want to export the
  results of this block, not the source code.
- The *=:mixvm=* header argument is custom to =ob-mixal=. It provides a list of
  output values that we want to see in the output. In this case, we're only
  asking for the value of =rA= (the accumulator register) at the end of the
  program. See the README for a full list of allowable outputs.
- We set the values of the =%INST%= and =%ADDR%= macros, and the =VALUE= symbolic
  constant, using the standard Babel *=:var=* header argument.
  - Macros do a textual replace on the body of the code, just like a standard
    C pre-processor. They must consist of all capital letters, surrounded by =%=
    symbols.
  - Symbolic constants are defined using EQU instructions at the beginning of the
    code block. They must consist of all capital letters and be undecorated.

If you place point anywhere in the code block, and then press =C-c C-v v=, Babel
will expand the code block and show the results in a buffer. You can use this to
troubleshoot any issues you're having with your code. Here's what the above codey
block expands to:

#+BEGIN_SRC mixal :exports code
  VALUE   EQU     5(1:1),1(2:2),200(3:4),15(5:5)
          ORIG    3000
          CON     VALUE
  START   LDAN  3000
          HLT
          END     START
#+END_SRC

** Running the Code

So now we're ready to answer the initial question. Here are the outputs we get
from *=mixvm=* for each instruction/address pair listed above.

*** =LDAN 3000=

#+BEGIN_SRC mixal :noweb yes :exports results :mixvm rA :var %INST%="LDAN" %ADDR%="3000" VALUE="5(1:1),1(2:2),200(3:4),15(5:5)"
<<example_mixasm>>
#+END_SRC

*** =LD2N 3000(3:4)=

#+BEGIN_SRC mixal :noweb yes :exports results :mixvm rI2 :var %INST%="LD2N" %ADDR%="3000(3:4)" VALUE="5(1:1),1(2:2),200(3:4),15(5:5)"
<<example_mixasm>>
#+END_SRC

*** =LDX 3000(1:3)=

#+BEGIN_SRC mixal :noweb yes :exports results :mixvm rX :var %INST%="LDX" %ADDR%="3000(1:3)" VALUE="5(1:1),1(2:2),200(3:4),15(5:5)"
<<example_mixasm>>
#+END_SRC

*** =LDXN 3000(0:0)=

#+BEGIN_SRC mixal :noweb yes :exports results :mixvm rX :var %INST%="LDXN" %ADDR%="3000(0:0)" VALUE="5(1:1),1(2:2),200(3:4),15(5:5)"
<<example_mixasm>>
#+END_SRC

* Conclusion

This document gives a simple example of how to use =ob-mixal= in conjunction with
GNU MDK. I hope you find it useful.
